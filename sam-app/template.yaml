AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM app to test postgres with redis

Parameters:
  EnvironmentType: 
    Type: String
    Default: 'dev'
  DBInstanceIdentifier: 
    Type: String
    Default: 'webapp-db'
  DBUsername: 
    Type: String
    Default: 'postgres'
  DBPassword: 
    Type: String
    Default: 'postgres'

Globals:
  Function:
    Timeout: 9

Resources:

  EC2LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  GetDefaultVpcFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
            try:
              ec = boto3.client('ec2')
              response = ec.describe_vpcs(
                Filters=[{
                  'Name': 'isDefault',
                  'Values': ['true',]
                },]
              )
              defaultId = response['Vpcs'][0]['VpcId']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"defaultId":defaultId})
            except (Exception) as error:
              print(error)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Handler: index.lambda_handler
      Runtime: "python3.7"
      Timeout: '10'
      Role: !GetAtt EC2LambdaRole.Arn

  GetFirstSubnetFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def lambda_handler(event, context):
            try:
              ec = boto3.client('ec2')
              response = ec.describe_subnets(
                Filters=[{
                  'Name': 'vpc-id',
                  'Values': [event['ResourceProperties']['Environment']['Variables']['vpcid'],]
                },]
              )
              firstSubnet = response['Subnets'][0]
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {"az":firstSubnet['AvailabilityZone'], "subId":firstSubnet['SubnetId']})
            except (Exception) as error:
              print(error)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Handler: index.lambda_handler
      Runtime: "python3.7"
      Timeout: '10'
      Role: !GetAtt EC2LambdaRole.Arn

  GetDefaultVpc:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt GetDefaultVpcFunction.Arn
      Environment:
        Variables:
          Region: !Ref "AWS::Region"

  GetFirstSubnet:
    Type: 'Custom::LambdaCallout'
    Properties:
      ServiceToken: !GetAtt GetFirstSubnetFunction.Arn
      Environment:
        Variables:
          vpcid: !GetAtt GetDefaultVpc.defaultId

  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [ webapp-security-group, !Ref EnvironmentType ] ]
      GroupDescription: 'Allow HTTP/HTTPS and SSH inbound and outbound traffic'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  WebAppDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      VPCSecurityGroups:
      - !GetAtt DBEC2SecurityGroup.GroupId
      AllocatedStorage: '5'
      DBInstanceClass: db.t2.small
      Engine: postgres
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Join [ '-', [ webapp-rds, !Ref EnvironmentType ] ]
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot

  DBEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [ webapp-db-security-group, !Ref EnvironmentType ] ]
      GroupDescription: Allow postgres inbound traffic
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join [ '-', [ webapp-db-security-group, !Ref EnvironmentType ] ]

  CacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: cache
      VpcId: !GetAtt GetDefaultVpc.defaultId
  CacheSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref CacheSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      CidrIp: 0.0.0.0/0
  Cache:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      CacheNodeType: 'cache.t2.micro'
      CacheSubnetGroupName: !Ref CacheSubnetGroup
      Engine: redis
      EngineVersion: '3.2.4'
      NumCacheNodes: 1
      VpcSecurityGroupIds:
      - !Ref CacheSecurityGroup
  CacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: cache
      SubnetIds:
      - !GetAtt GetFirstSubnet.subId
      
  HelloWorldFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: .
      Handler: app.lambda_handler
      Runtime: python3.7
      Policies:
        - AmazonRDSFullAccess
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /helloworld
            Method: get
  HelloRedisFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: .
      Handler: redis-app.lambda_handler
      Runtime: python3.7
      Policies:
        - AmazonRDSFullAccess
        - AmazonElastiCacheFullAccess
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !Ref CacheSecurityGroup
        SubnetIds:
          - !GetAtt GetFirstSubnet.subId
      Events:
        HelloWorld:
          Type: Api 
          Properties:
            Path: /helloredis
            Method: get
      Environment:
        Variables:
          DB_Host: !GetAtt WebAppDatabase.Endpoint.Address
          DB_Username: !Ref DBUsername
          DB_Password: !Ref DBPassword
          DB_Type: 'postgres'
          DB_Port: '5432'
          REDIS_URL: !GetAtt Cache.RedisEndpoint.Address

Outputs:

  WebAppDatabaseEndpoint:
    Description: 'Connection endpoint for the database'
    Value: !GetAtt WebAppDatabase.Endpoint.Address
  RedisEndpoint:
    Description: 'Connection endpoint for the cache'
    Value: !GetAtt Cache.RedisEndpoint.Address
  RedisSite:
    Description: 'Connection url for the cache'
    Value: "redis://{Cache.RedisEndpoint.Address}:6379"

  HelloWorldApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/helloworld"
  HelloWRedisApi:
    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/helloredis"
